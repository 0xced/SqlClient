<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(_NTDRIVE)$(_NTROOT)\tools\Microsoft.CombinedBuild.Settings.targets" />

  <!-- Build both CoreClr and Desktop versions of binaries when building NDP by default -->
  <PropertyGroup>
    <NdpCombinedDesktopCoreClrBuild Condition="'$(NdpCombinedDesktopCoreClrBuild)' == ''">true</NdpCombinedDesktopCoreClrBuild>
    <NdpBuildCoreClr Condition="'$(NdpBuildCoreClr)' == ''">true</NdpBuildCoreClr>
    <NdpBuildDesktop Condition="'$(NdpBuildDesktop)' == ''">true</NdpBuildDesktop>
  </PropertyGroup>

  <Choose>
    <When Condition="'$(BuildProjectName)' == 'CoreSys'">
      <PropertyGroup>
        <BuildProjectName>CoreClr</BuildProjectName>
        <BuildForCoreSystem>true</BuildForCoreSystem>
        <CoreClrSuffix>CORESYS</CoreClrSuffix>
                <DoOacrBuild>false</DoOacrBuild>
      </PropertyGroup>
    </When>
    <When Condition="'$(BuildProjectName)' == 'CoreCLR'">
      <PropertyGroup>
        <BuildProjectName>CoreClr</BuildProjectName>
        <TargetFrameworkIdentifier Condition="'$(TargetFrameworkIdentifier)' == ''">.Silverlight</TargetFrameworkIdentifier>
        <TargetFrameworkVersion Condition=" '$(TargetFrameworkVersion)' == '' ">v4.0</TargetFrameworkVersion>
        <TargetNativeToolsetVersion>v10</TargetNativeToolsetVersion>
        <CoreClrSuffix>CORE</CoreClrSuffix>
        <ManagedToolsVersion>v4.5</ManagedToolsVersion>
        <AllowCrossTargeting>true</AllowCrossTargeting>
        <WinFxToolsVersion Condition="'$(WinFxToolsVersion)' == ''">$(ManagedToolsVersion)</WinFxToolsVersion>
      </PropertyGroup>
    </When>
  </Choose>

  <Import Project="$(_NTDRIVE)$(_NTROOT)\tools\Microsoft.DevDiv.Native.Settings.targets" />

  <PropertyGroup>
    <DacTableGen>$(DevDivToolsBinPath)\DacTableGen.exe</DacTableGen>
    <DacTableApply>$(DevDivToolsBinPath)\DacTableApply.exe</DacTableApply>
    <InjectResource>$(DevDivToolsBinPath)\InjectResource.exe</InjectResource>
    <GenClrDebugResource>$(DevDivToolsBinPath)\GenClrDebugResource.exe</GenClrDebugResource>
    <PdbTypeMatch>$(DevDivToolsBinPath)\PdbTypeMatch.exe</PdbTypeMatch>
  </PropertyGroup>

  <PropertyGroup>
    <CscToolPath Condition="('$(BuildProjectName)' == 'CoreCLR')">$(ManagedToolsRoot)$(ManagedToolsVersion)</CscToolPath>
    <NdpRoot Condition="'$(NdpRoot)' ==''">$(EnlistmentRootPath)\ndp</NdpRoot>
    <SplitGenSRCommand Condition="'$(SplitGenSRCommand)' ==''">$(PerlCommand) -I$(DevDivToolsPath) -w $(DevDivToolsPath)\gensr_split.pl</SplitGenSRCommand>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Temporary way to opt out of running ApiConformance while we dogfood it.  Set NO_API_CONFORMACE=1 in your environment -->
    <VerifyApiConformance Condition="'$(NO_API_CONFORMANCE)' == '1'">false</VerifyApiConformance>

    <ApiConformanceBuildType Condition="'$(BuildProjectName)' == ''">Desktop</ApiConformanceBuildType>
    <ApiConformanceBuildType Condition="'$(BuildProjectName)' == 'CoreClr'">CoreClr</ApiConformanceBuildType>

    <!-- This is the version number of the product we're building in the tree.  It doesn't need to 
          (and for in place releases likely shouldn't) match the assembly version.  For example, Dev10 would
          have been v4.0, but Dev11 will be v4.5.  This doesn't get exposed to customers in any way, it's
          just used when looking up what checks to run. -->
    <ApiConformanceBuildVersion Condition="'$(BuildProjectName)' == ''">4.5</ApiConformanceBuildVersion>
    <ApiConformanceBuildVersion Condition="'$(BuildProjectName)' == 'CoreClr'">5.0</ApiConformanceBuildVersion>

    <ApiConformanceRootDirectory>$(RazzleToolPath)\ApiConformance</ApiConformanceRootDirectory>
    <ApiConformanceBaselineDirectory>$(ApiConformanceRootDirectory)\Baselines</ApiConformanceBaselineDirectory>
  </PropertyGroup>

  <!-- Enable minification of IBC data for NDP assemblies -->
  <PropertyGroup>
    <MinifyIbcData>true</MinifyIbcData>
  </PropertyGroup>

</Project>
